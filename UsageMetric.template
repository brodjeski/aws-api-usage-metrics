{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Deploy Lambda function and alarms for API Gateway quota usage.  Capture usage data and publish % utilization to CloudWatch",
    "Parameters": {
        "LambdaRuntime": {
            "Type": "String",
            "Description": "Lambda runtime language",
            "Default": "python3.7"
        },
        "LambdaTimeout": {
            "Type": "Number",
            "Description": "Function Timeout",
            "Default": 25
        },
        "UsagePlanName": {
            "Type": "String",
            "Description": "Usage Plan for tied to the API",
            "Default": "TestUsagePlan"
        },
        "APIID": {
            "Type": "String",
            "Description": "ID of API being tracked"
        },
        "APIKey": {
            "Type": "String",
            "Description": "Name of API Key to be created for the Usage Plan",
            "Default": "TestAPIKey"
        },
        "APIStage": {
            "Type": "String",
            "Description": "Stage API is deployed to"
        },
        "UtilizationMetricName": {
            "Type": "String",
            "Description": "% Utilization CW Metric",
            "Default": "API Usage"
        },
        "UtilizationMetricNamespace": {
            "Type": "String",
            "Description": "Namespace for the utilization metric",
            "Default": "/User/APIGateway/Utilization"
        },
        "AlarmPeriod": {
            "Type": "Number",
            "Description": "Number of seconds over which the metric statistic is applied. (Must be 10, 30 or multiple of 60",
            "Default": 10
        },
        "AlarmThreshold": {
            "Type": "Number",
            "Description": "Utilization threshold % to trigger alarm",
            "Default": 10
        },
        "LambdaEventTriggerRateValue": {
            "Type": "Number",
            "Description": "A positive number for unit of time between utilization Lambda execution runs. This is set low for demonstation purposes",
            "Default": 5
        },
        "LambdaEventTriggerRateUnit": {
            "Type": "String",
            "Description": "Unit of time for triggering utilization Lambda function. (Different units are required for value of 1, e.g., 'minute' instead of 'minutes'",
            "Default": "minutes"
        },
        "UsagePlanQuotaLimit": {
            "Type": "Number",
            "Description": "Usage Plan Quota Limit",
            "Default": 10
        },
        "UsagePlanQuotaOffset": {
            "Type": "Number",
            "Description": "Usage Plan Quota Offset",
            "Default": 0
        },
        "UsagePlanQuotaPeriod": {
            "Type": "String",
            "Description": "Usage Plan Quota Period (DAY, WEEK, or MONTH)",
            "Default": "DAY"
        },
        "UsagePlanThrottleBurstLimit": {
            "Type": "Number",
            "Description": "Usage Plan Throttle Burst Limit",
            "Default": 50
        },
        "UsagePlanThrottleRateLimit": {
            "Type": "Number",
            "Description": "Usage Plan Throttle Rate Limit",
            "Default": 100
        },
        "SNSNotificationTopicName": {
            "Type": "String",
            "Description": "SNS Topic to receive alarm notification when utilization threshold is reached",
            "Default": "APIGatewayThresholdAlarm-1"
        },
        "SNSNotificationEmail": {
            "Type": "String",
            "Description": "Email address for utilization threshold alert notification"
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Lambda Function Deployment"
                    },
                    "Parameters": [
                        "LambdaExecutionRole",
                        "LambdaRuntime",
                        "LambdaTimeout"
                    ]
                },
                {
                    "Label": {
                        "default": "Quota Utilization Metric Generation"
                    },
                    "Parameters": [
                        "UtilizationMetricName",
                        "UtilizationMetricNamespace",
                        "AlarmPeriod",
                        "AlarmThreshold",
                        "LambdaEventTriggerRateValue",
                        "LambdaEventTriggerRateUnit"
                    ]
                },
                {
                    "Label": {
                        "default": "Stage Related Parameters"
                    },
                    "Parameters": [
                        "UsagePlanName",
                        "APIKey",
                        "UsagePlanQuotaLimit",
                        "UsagePlanQuotaOffset",
                        "UsagePlanQuotaPeriod",
                        "UsagePlanQuotaPeriod",
                        "UsagePlanThrottleBurstLimit",
                        "UsagePlanThrottleRateLimit"
                    ]
                },
                {
                    "Label": {
                        "default": "SNS Notification"
                    },
                    "Parameters": [
                        "SNSNotificationTopicName",
                        "SNSNotificationEmail"
                    ]
                },
                {
                    "Label": { 
                        "default" : "API Information" 
                    },
                    "Parameters": [
                        "APIID",
                        "APIStage"
                    ]
                }
            ] 
            
        }
    },
    "Resources": {
        "APIUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "Properties": {
                "ApiStages": [
                    {
                        "ApiId": { "Ref": "APIID" },
                        "Stage": { "Ref": "APIStage" }
                    }
                ],
                "Description": "Usage plan ",
                "Quota": {
                    "Limit": {
                        "Ref": "UsagePlanQuotaLimit"
                    },
                    "Offset": {
                        "Ref": "UsagePlanQuotaOffset"
                    },
                    "Period": {
                        "Ref": "UsagePlanQuotaPeriod"
                    }
                },
                "Tags": [
                    {
                        "Key": "CreateAlarm",
                        "Value": "True"
                    }
                ],
                "Throttle": {
                    "BurstLimit": {
                        "Ref": "UsagePlanThrottleBurstLimit"
                    },
                    "RateLimit": {
                        "Ref": "UsagePlanThrottleRateLimit"
                    }
                },
                "UsagePlanName": {
                    "Ref": "UsagePlanName"
                }
            }
        },
        "UsageAPIKey": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
                "Description": "API Key associated with the quota",
                "Enabled": "true",
                "Name": "TestAPIKey"
            }
        },
        "UsagePlanAPIKeyMap": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
                "KeyId": {
                    "Ref": "UsageAPIKey"
                },
                "KeyType": "API_KEY",
                "UsagePlanId": {
                    "Ref": "APIUsagePlan"
                }
            }
        },
        "MetricsExtractPublishLambdaExecPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "Basic execution policy for metrics Lambda function to communicate with CloudWatch logs",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": "logs:CreateLogGroup",
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:logs:",
                                        {
                                            "Ref": "AWS::Region"
                                        },
                                        ":",
                                        {
                                            "Ref": "AWS::AccountId"
                                        },
                                        ":*"
                                    ]
                                ]
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "logs:CreateLogStream",
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:logs:",
                                            {
                                                "Ref": "AWS::Region"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWS::AccountId"
                                            },
                                            ":log-group:/aws/lambda/usage-metrics:*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "MetricsExtractPublishLambdaRole"
                    }
                ]
            }
        },
        "PutMetricPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "Description": "Policy allowing Lambda function to put metrics into CloudWatch",
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "VisualEditor0",
                            "Effect": "Allow",
                            "Action": "cloudwatch:PutMetricData",
                            "Resource": "*"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "MetricsExtractPublishLambdaRole"
                    }
                ]
            }
        },
        "MetricsExtractPublishLambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "MetricsExtractPublishLambdaRole",
                "Description": "Role to execute Lambda function querying usage plan quota utilization and putting metric into CloudWatch",
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator"
                ],
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                }
            }
        },
        "MetricsExtractPublishLambdaEventPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "MetricsExtractPublishLambda"
                },
                "Principal": "events.amazonaws.com",
                "SourceArn": {
                    "Fn::GetAtt": [
                        "UtilizationLambdaTimedTriggerEvent",
                        "Arn"
                    ]
                }
            }
        },
        "MetricsExtractPublishLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile" : {
                        "Fn::Join" : [
                            "\n", [
                            "#MIT License",
                            "#",
                            "#Copyright (c) 2022 Allen Brodjeski",
                            "#",
                            "#Permission is hereby granted, free of charge, to any person obtaining a copy",
                            "#of this software and associated documentation files (the \"Software\"), to deal",
                            "#in the Software without restriction, including without limitation the rights",
                            "#to use, copy, modify, merge, publish, distribute, sublicense, and/or sell",
                            "#copies of the Software, and to permit persons to whom the Software is",
                            "#furnished to do so, subject to the following conditions:",
                            "#",
                            "#The above copyright notice and this permission notice shall be included in all",
                            "#copies or substantial portions of the Software.",
                            "#",
                            "#THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR",
                            "#IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,",
                            "#FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE",
                            "#AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER",
                            "#LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,",
                            "#OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE",
                            "#SOFTWARE.",                                
                            "import boto3",
                            "import json",
                            "import datetime",
                            "import os",
                            "from datetime import date",
                            "from botocore.exceptions import ClientError",
                            "#",
                            "# Get usage data",
                            "#",
                            "#   Constants",
                            "DATA_USED = 0",
                            "DATA_REMAINING = 1",
                            "usagePlanId = ''",
                            "keyId = ''",
                            "metrics = {}",
                            "ns = os.environ['METRIC_NAMESPACE']",
                            "def lambda_handler( event, context ):",
                            "#",
                            "# Get usage data",
                            "#",
                            "    print( event )",
                            "    build_metrics()",
                            "    print( 'Metrics: ' + str(metrics) )",
                            "    if metrics:",
                            "        publish_metrics()",
                            "    else:",
                            "        print( 'No metrics to publish')",
                            "##################################################################################",
                            "def build_metrics():",
                            "    print( 'In build_metrics')",
                            "    current_date = date.today()",
                            "    api_client = boto3.client( 'apigateway' )",
                            "    plan_response = api_client.get_usage_plans()",
                            "    print( 'Usage Plans: ' + str(plan_response) )",
                            "    for item in plan_response['items']:",
                            "        up_name = item['name']",
                            "        #print( 'UP Name: '' + up_name )",
                            "        up_id = item['id']",
                            "        print( 'UP Id: ' + item['id'] )",
                            "        key_response = api_client.get_usage_plan_keys( usagePlanId = item['id'] )",
                            "        print('API Keys: ' + str(key_response))",
                            "        for key_item in key_response['items']:",
                            "            key_name = key_item['name']",
                            "            print( 'API Key: ' + key_name )",
                            "            print( 'API Key Id: ' + key_item['id'] )",
                            "            usage_response = api_client.get_usage(",
                            "                       usagePlanId = item['id'],",
                            "                        keyId =  key_item['id'],",
                            "                        startDate = str( current_date ),",
                            "                       endDate = str( current_date ),",
                            "                        )",
                            "            print( 'Usage: ' + str(usage_response))",
                            "            if usage_response['items']:",
                            "               for api_key in usage_response['items']:",
                            "                   utilization = usage_response['items'][api_key][0][0] / (usage_response['items'][api_key][0][DATA_USED] + usage_response['items'][api_key][0][DATA_REMAINING]) * 100",
                            "                   metric_dimension = (up_name, key_name)",
                            "                   metrics[metric_dimension] = utilization",
                            "################################################################################",
                            "def publish_metrics():",
                            "        print('------In publish_metrics--------------')",
                            "        cw_client = boto3.client( 'cloudwatch' )",
                            "        for metric in metrics:",
                            "            up_name = metric[0]",
                            "            api_key = metric[1]",
                            "            utilization = float( metrics[metric] )",
                            "            response = cw_client.put_metric_data(",
                            "               Namespace = ns,",
                            "                MetricData = [",
                            "                   {",
                            "                       'MetricName' : 'API Usage',",
                            "                        'Dimensions' : [",
                            "                            {",
                            "                                'Name' : 'Usage Plan',",
                            "                                'Value' : up_name",
                            "                            },",
                            "                            {",
                            "                                'Name' : 'API Key',",
                            "                                'Value' : api_key",
                            "                            }",
                            "                        ],",
                            "                       'Value' : utilization,",
                            "                        'StorageResolution' : 60,",
                            "                        'Unit' : 'Percent'",
                            "                    }",
                            "                ]",
                            "            )",
                            "            print('Put metric: ' + str(response))",
                            "            print(str(up_name) + ' ' + str(api_key) + ' ' + str(utilization)  )"
                            ]
                        ]
                    }
                },
                "Description": "Lambda function to extract usage data and publish to CloudWatch Metrics",
                "FunctionName": "usage-metrics",
                "Handler": "index.lambda_handler",
                "Environment" : {
                    "Variables" : { "METRIC_NAMESPACE" : { "Ref": "UtilizationMetricNamespace"} }
                },
                "Role": {
                    "Fn::GetAtt": [
                        "MetricsExtractPublishLambdaRole",
                        "Arn"
                    ]
                },
                "Runtime": {
                    "Ref": "LambdaRuntime"
                },
                "Timeout": {
                    "Ref": "LambdaTimeout"
                }
            }
        },
        "UtilizationLambdaTimedTriggerEvent": {
            "Type": "AWS::Events::Rule",
            "Properties": {
                "Description": "Event that triggers the utilization quota Lambda function",
                "Name": "Quota-utilization-lambda-trigger",
                "ScheduleExpression": {
                    "Fn::Join": [
                        "",
                        [
                            "rate(",
                            {
                                "Ref": "LambdaEventTriggerRateValue"
                            },
                            " ",
                            {
                                "Ref": "LambdaEventTriggerRateUnit"
                            },
                            ")"
                        ]
                    ]
                },
                "State": "ENABLED",
                "Targets": [
                    {
                        "Arn": {
                            "Fn::GetAtt": [
                                "MetricsExtractPublishLambda",
                                "Arn"
                            ]
                        },
                        "Id": "UtilizationLambdaFunction"
                    }
                ]
            }
        },
        "MetricsCWAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmName": "API Utilization Threshold Alarm",
                "AlarmDescription": "Alarm to trigger when utilization reaches the defined threshold",
                "MetricName": {
                    "Ref": "UtilizationMetricName"
                },
                "AlarmActions": [
                    {
                        "Ref": "AlarmAlertTargetSNS"
                    }
                ],
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "DatapointsToAlarm": 1,
                "Dimensions": [
                    {
                        "Name": "Usage Plan",
                        "Value": {
                            "Ref": "UsagePlanName"
                        }
                    },
                    {
                        "Name": "API Key",
                        "Value": {
                            "Ref": "APIKey"
                        }
                    }
                ],
                "Namespace": {"Ref" : "UtilizationMetricNamespace"},
                "Statistic": "Sum",
                "Period": {
                    "Ref": "AlarmPeriod"
                },
                "EvaluationPeriods": 1,
                "Threshold": {
                    "Ref": "AlarmThreshold"
                }
            }
        },
        "AlarmAlertTargetSNS": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": "API Utilization Notification",
                "TopicName": {
                    "Ref": "SNSNotificationTopicName"
                }
            }
        },
        "AlarmSNSSubscription": {
            "Type": "AWS::SNS::Subscription",
            "Properties": {
                "Endpoint": {
                    "Ref": "SNSNotificationEmail"
                },
                "Protocol": "email",
                "TopicArn": {
                    "Ref": "AlarmAlertTargetSNS"
                }
            }
        }
    },
    "Outputs": {
        "AlarmSNSTopicArn": {
            "Description": "The SNS Topic SRN used as an Alarm Action",
            "Value": {
                "Ref": "AlarmAlertTargetSNS"
            },
            "Export": {
                "Name": "AlarmSNSTopicArn"
            }
        }
    }
}